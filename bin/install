#!/usr/bin/env bash

###
# utility functions
###
clearApkCache () {
  rm -rf \
    /tmp/* \
    /var/cache/apk/*
}

printLine () {
  local DIVIDER="===================="
  local TEMPLATE="\n\n${DIVIDER}${DIVIDER}${DIVIDER}\n%s\n\n\n"

  printf "${TEMPLATE}" "${1}"
}

###
# base environment install script for Alpine Linux on Docker
###
baseInstall () {
  ###
  # NOTE: packages for env improvements are a personal preference here...
  #   - bash-completion coreutils grep tree
  ###
  printLine "Installing environment dependencies"
  apk add --update --no-cache \
    coreutils \
    dumb-init \
    grep \
    openssl \
    tree

 # mkdir /cert
 # openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
 # -keyout /cert/ssl-key.pem -out /cert/ssl-cert.pem
}

###
# project install script for project dependencies
#   - this can and should be run as needed in dev environment to update project dependencies
#       - example: re-running "npm install" to update versions
###
projectInstall () {
  if [[ "${NODE_ENV}" == "development" ]]; then
    printLine "Installing (All) Node.js Dependencies"
    npm ci --quiet --no-optional
  else
    printLine "Installing (Production) Node.js Dependencies"
    npm ci --quiet --no-optional --production
    npm prune --production
  fi

  printLine "Clearing Node and NPM cache"
  npm cache clean --force
  rm -rf \
    ${HOME_DIR}/.npm \
    ${HOME_DIR}/.node-gyp
}

###
# install script for Alpine Linux on Docker
###
runInstall () {
  baseInstall
  projectInstall
  clearApkCache

  # set permissions for node user group
  chgrp -R node .
  chmod -R g+w .
}

runInstall && exit 0